spring.application.name=UserService

logging.level.org.springframework.web=TRACE

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/userservice
spring.datasource.username=userserviceuser
#spring.datasource.password=secret
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql:true

# ========================
# Server Configuration
# ========================
server.port=4141

# ========================
# Logging Configuration
# ========================
logging.level.org.springframework.security=trace

## ========================
## Basic Authentication
## ========================
#spring.security.user.name=user      # Default username for basic authentication.
#spring.security.user.password=password  # Default password (not recommended for production).
#
## ========================
## OAuth2 Authorization Server Configuration
## Adding a client for OAuth2 server
## ========================
#
## Client ID for the OpenID Connect (OIDC) client
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-id=oidc-client
#
## Client Secret (the `{noop}` prefix means it's stored as plain text; use proper encoding for production)
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-secret={noop}secret
#
## Client authentication methods (how the client proves its identity)
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-authentication-methods=client_secret_basic
#
## Authorization grant types (how the client obtains tokens)
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types=authorization_code,refresh_token
#
## Redirect URI after authentication (OIDC will redirect users here after login)
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.redirect-uris=http://127.0.0.1:8080/login/oauth2/code/oidc-client
#
## Redirect URI after logout (where users go after logging out)
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.post-logout-redirect-uris=http://127.0.0.1:8080/
#
## Scopes define what data the client can access (e.g., OpenID Connect, profile info)
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes=openid,profile
#
## Whether the user needs to approve the authorization request explicitly
#spring.security.oauth2.authorizationserver.client.oidc-client.require-authorization-consent=true

